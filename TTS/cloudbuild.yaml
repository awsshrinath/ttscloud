steps:
  # Step 1: Check for changes in the TTS folder
  - name: 'ubuntu'
    id: 'Check TTS service'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if git diff --name-only $COMMIT_SHA~1 $COMMIT_SHA | grep '^TTS/'; then
          echo "Changes detected in TTS service"
          touch /TTS/tts_changes.txt
        else
          echo "No changes in TTS service"
        fi

  # Step 2: Build the Docker image for TTS service if changes are detected
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build TTS service'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ -f /TTS/tts_changes.txt ]; then
          docker build -t gcr.io/$PROJECT_ID/tts:$COMMIT_SHA -f ./TTS/Dockerfile ./TTS
        else
          echo "Skipping build for TTS service"
        fi
    waitFor: ['Check TTS service']

  # Step 3: Push the Docker image if the build was executed
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push TTS service'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ -f /TTS/tts_changes.txt ]; then
          docker push gcr.io/$PROJECT_ID/tts:$COMMIT_SHA
        else
          echo "Skipping push for TTS service"
        fi
    waitFor: ['Build TTS service']

  # Step 4: Deploy the TTS service to Cloud Run if the image was pushed
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Deploy TTS service'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ -f /TTS/tts_changes.txt ]; then
          gcloud run deploy tts --image gcr.io/$PROJECT_ID/tts:$COMMIT_SHA --region asia-south1 --platform managed --allow-unauthenticated
        else
          echo "Skipping deploy for TTS service"
        fi
    waitFor: ['Push TTS service']

# Optional: Specify a bucket for logs
logsBucket: "gs://vdocomp-logs"

# Substitutions for reusability
substitutions:
  _SERVICE_NAME: 'tts'
  _REGION: 'asia-south1'
