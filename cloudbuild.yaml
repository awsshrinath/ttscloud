steps:
  # Step 1: Check for changes in TTS service
  - name: 'ubuntu'
    id: 'Check TTS service changes'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if git diff --name-only $COMMIT_SHA~1 $COMMIT_SHA | grep '^TTS/'; then
          echo "Changes detected in TTS service"
          touch /workspace/tts_changes.txt
        else
          echo "No changes in TTS service"
        fi

  # Step 2: Check for changes in VdoCompose service
  - name: 'ubuntu'
    id: 'Check VdoCompose service changes'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if git diff --name-only $COMMIT_SHA~1 $COMMIT_SHA | grep '^VdoCompose/'; then
          echo "Changes detected in VdoCompose service"
          touch /workspace/vdocomp_changes.txt
        else
          echo "No changes in VdoCompose service"
        fi

  # Step 3: Build and push the Docker image for TTS service if changes are detected
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build and Push TTS service'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ -f /workspace/tts_changes.txt ]; then
          docker build -t gcr.io/$PROJECT_ID/tts:$COMMIT_SHA -f ./TTS/Dockerfile ./TTS
          docker push gcr.io/$PROJECT_ID/tts:$COMMIT_SHA
        else
          echo "Skipping build and push for TTS service"
        fi
    waitFor: ['Check TTS service changes']

  # Step 4: Build and push the Docker image for VdoCompose service if changes are detected
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build and Push VdoCompose service'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ -f /workspace/vdocomp_changes.txt ]; then
          docker build -t gcr.io/$PROJECT_ID/vdocomp:$COMMIT_SHA -f ./VdoCompose/Dockerfile ./VdoCompose
          docker push gcr.io/$PROJECT_ID/vdocomp:$COMMIT_SHA
        else
          echo "Skipping build and push for VdoCompose service"
        fi
    waitFor: ['Check VdoCompose service changes']

  # Step 5: Deploy TTS service to Cloud Run if the image was pushed
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Deploy TTS service'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ -f /workspace/tts_changes.txt ]; then
          gcloud run deploy tts --image gcr.io/$PROJECT_ID/tts:$COMMIT_SHA --region asia-south1 --platform managed --allow-unauthenticated
        else
          echo "Skipping deploy for TTS service"
        fi
    waitFor: ['Build and Push TTS service']

  # Step 6: Deploy VdoCompose service to Cloud Run if the image was pushed
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Deploy VdoCompose service'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ -f /workspace/vdocomp_changes.txt ]; then
          gcloud run deploy vdocomp --image gcr.io/$PROJECT_ID/vdocomp:$COMMIT_SHA --region asia-south1 --platform managed --allow-unauthenticated
        else
          echo "Skipping deploy for VdoCompose service"
        fi
    waitFor: ['Build and Push VdoCompose service']

# Optional: Specify logs bucket for centralized logging
logsBucket: "gs://vdocomp-logs"


